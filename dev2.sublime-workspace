{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PDO",
				"PDO_DSN"
			],
			[
				"da",
				"dataObj"
			],
			[
				"html",
				"htmlentities"
			],
			[
				"inputT",
				"inputText  (function)"
			],
			[
				"chec",
				"checked"
			],
			[
				"tit",
				"titre"
			],
			[
				"ht",
				"htmlOptions"
			],
			[
				"htm",
				"htmlOptions  (variable)"
			],
			[
				"for",
				"foreach	foreach …"
			],
			[
				"_s",
				"_SESSION  (variable)"
			],
			[
				"flas",
				"flashApp"
			],
			[
				"fla",
				"flashApp"
			],
			[
				"arra",
				"array"
			],
			[
				"_S",
				"_SESSION  (variable)"
			],
			[
				"App",
				"AppException"
			],
			[
				"var",
				"var_dump"
			],
			[
				"Exe",
				"ExempleDB"
			],
			[
				"is_n",
				"is_null"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"command_palette":
	{
		"height": 128.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pro",
				"Project: Save As"
			],
			[
				"projet",
				"Project: Save As"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"remova",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 597.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/var/www/www-dev/MVCApp/views/layout/main.php",
		"/var/www/www-dev/MVCApp/components/FlashMessage.php",
		"/var/www/www-dev/MVCApp/controllers/ExempleController.php",
		"/var/www/www-dev/MVCApp/data/schema.mysql.sql",
		"/var/www/www-dev/MVCApp/views/Exemple/form.php",
		"/var/www/www-dev/MVCApp/components/Form.php",
		"/var/www/www-dev/MVCApp/components/Model.php",
		"/var/www/www-dev/MVCApp/models/Exemple/Exemple.php",
		"/var/www/www-dev/MVCApp/components/Db.php",
		"/var/www/www-dev/test/bd.php",
		"/home/amaury/Téléchargements/bd.php",
		"/var/www/www-dev/MVCApp/models/Exemple/ExempleDB.php",
		"/var/www/www-dev/MVCApp/components/App.php",
		"/var/www/www-dev/MVCApp/components/AppException.php",
		"/var/www/www-dev/MVCApp/components/Controller.php",
		"/var/www/www-dev/MVCApp/components/ModeleDb.php",
		"/var/www/www-dev/MVCApp/css/foundation/css/foundation.css",
		"/var/www/www-dev/MVCApp/index.php",
		"/var/www/www-dev/MVCApp/views/Exemple/index.php",
		"/var/www/www-dev/MVCApp/config/config.php",
		"/var/www/www-dev/MVCApp/views/error.php",
		"/var/www/www-dev/MVCApp/views/Exemple/delete.php",
		"/var/www/www-dev/MVCApp/views/Exemple/view.php",
		"/home/amaury/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
		"/home/amaury/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/amaury/.config/sublime-text-3/Packages/Default/Default (Linux).sublime-keymap",
		"/home/amaury/Téléchargements/grafikart_sources_tutoriel_creer_un_mvc/core/controller.php",
		"/var/www/www-dev/MVCApp/mvcapp.sublime-project"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\");\n",
			"<?php\n/**\n* Classe qui gére le modèle exemple en base de donnée\n* @author Amaury Lavieille\n*/\nnamespace MonAppli\\Exemple;\n\n\nuse MvcApp\\Components\\Db;\n\nclass ExempleDB extends Db\n{\n	\n	/**\n	* @param String $dbName Nom de la table \n	*/\n    protected $tableName;\n\n\n    private $createModelStatement;\n    private $updateModelStatement;\n    private $deleteModelStatement;\n    private $findAllModelStatement;\n	private $findModelStatement;\n\n	/**\n	* Contructeur protégé, \n	* utiliser getInstance() pour acceder à l'instance de classe\n	*/\n	protected function __construct()\n	{\n		$this->tableName = \"Exemple\";\n		parent::__construct();\n        $this->createModelStatement = $this->createInsertQuery();\n        $this->updateModelStatement = $this->createUpdateQuery();\n		$this->deleteModelStatement = $this->createDeleteQuery();\n        $this->findAllModelStatement = $this->createSelectAllQuery();\n		$this->findModelStatement = $this->createSelectQuery();\n	}\n\n\n\n    /**\n    * Créer la requête preparée pour l'insertion d'un exemple\n    * @return PDO statement \n    */\n    private function createInsertQuery()\n    {\n        $values = \":title, :content\";\n        $query = \"INSERT INTO \".$this->tableName.\" VALUES ('',\".$values.\")\";\n        return $this->pdo->prepare($query);\n    }\n\n    /**\n    * Créer la requête preparée pour la mise jour d'un exemple \n    * @return PDO statement \n    */\n    private function createUpdateQuery()\n    {\n        $values = \"title=:title, content=:content\";\n        $query = \" UPDATE \".$this->tableName.\" SET \".$values.\" WHERE id=:id\";\n        return $this->pdo->prepare($query);\n    }   \n\n     /**\n    * Créer la requête preparée pour la mise jour d'un exemple \n    * @return PDO statement \n    */\n    private function createDeleteQuery()\n    {\n    	$query = \"DELETE FROM \".$this->tableName.\" WHERE id=:id\";\n    	return $this->pdo->prepare($query);\n    }\n\n    /**\n    * Crée la requête préparée pour la selection de tous les lignes\n    * @return PDO statement\n    */\n    public function createSelectAllQuery()\n    {\n        $query = \"  SELECT * FROM \". $this->tableName.\" ORDER BY id desc\";\n        return $this->pdo->prepare($query);\n    }\n\n    /**\n    * Crée la requête préparée pour la selection d'une ligne\n    * @return PDO statement\n    */\n    public function createSelectQuery()\n    {\n        $query = \"  SELECT * FROM \". $this->tableName.\" WHERE id=:id\";\n        return $this->pdo->prepare($query);\n    }\n\n    /**\n    * Sauvegarde un modele dans la base de donnée\n    * @var Object $model\n    */\n    public function save($model)\n    {\n        \n        $this->createModelStatement->bindValue(\"title\",$model->getTitle());\n        $this->createModelStatement->bindValue(\"content\",$model->getContent());\n        $this->createModelStatement->execute(); \n        return $this->pdo->lastInsertId();\n    }\n\n    /**\n    * Met à jour un modele dans la base de donnée\n    * @var Object $model\n    */\n    public function update($model)\n    {\n        \n        $this->updateModelStatement->bindValue(\":id\",$model->getId());\n        $this->updateModelStatement->bindValue(\"title\",$model->getTitle());\n        $this->updateModelStatement->bindValue(\"content\",$model->getContent());\n        $this->updateModelStatement->execute();    \n        return $model->getId();\n    }\n\n   /**\n    * Supprimer un exemple\n    * @var Object $model\n    */\n    public function delete($model)\n    {\n        \n        $this->deleteModelStatement->bindValue(\":id\",$model->getId());\n		$this->deleteModelStatement->execute();	\n\n    }\n\n\n    /**\n    * Cherche tous les lignes\n    * @return Array array of model\n    */\n    public function findAll()\n    {\n        $this->findAllModelStatement->execute();\n        $res = array();\n        while (($ligne = $this->findAllModelStatement->fetch()) !== false) {\n            $res[] = Exemple::initialize($ligne);\n        } \n        return $res;\n    }\n\n    /**\n    * Cherche une ligne\n    * @return Object Model if exist else return null\n    */\n    public function find($id)\n    {\n       \n        $this->findModelStatement->bindValue(\"id\",$id);\n        $this->findModelStatement->execute();\n        $res = array();\n        if($ligne = $this->findModelStatement->fetch()){\n            return Exemple::initialize($ligne);\n        }\n        return null;\n    }\n\n\n\n\n}\n",
			"margin-top",
			"margin"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "dev2.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/var/www/www-dev/libebook/libebook.sublime-project"
			],
			[
				"mv",
				"/var/www/www-dev/MVCApp/mvcapp.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 256.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
